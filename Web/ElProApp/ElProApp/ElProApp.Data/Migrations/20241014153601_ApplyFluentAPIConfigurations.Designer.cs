// <auto-generated />
using System;
using ElProApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElProApp.Data.Migrations
{
    [DbContext(typeof(ElProAppDbContext))]
    [Migration("20241014153601_ApplyFluentAPIConfigurations")]
    partial class ApplyFluentAPIConfigurations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ElProApp.Data.Models.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the building.");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The location of the building with a minimum of 10 and a maximum of 100 characters.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the building with a minimum of 3 and a maximum of 50 characters.");

                    b.HasKey("Id");

                    b.ToTable("buildings");
                });

            modelBuilder.Entity("ElProApp.Data.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the employee.");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The first name of the employee with a maximum of 20 characters.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The last name of the employee with a maximum of 20 characters.");

                    b.Property<decimal>("MoneyToTake")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The money the employee has to take, must be a positive value.");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key representing the team to which the employee belongs.");

                    b.Property<decimal>("Wages")
                        .HasColumnType("decimal(4, 2)")
                        .HasComment("The wages of the employee with up to 4 digits before the decimal point and up to 2 digits after.");

                    b.HasKey("Id");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("ElProApp.Data.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the job with a maximum of 50 characters.");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(4, 2)")
                        .HasComment("The price of the job with up to 4 digits before the decimal point and up to 2 digits after.");

                    b.HasKey("Id");

                    b.ToTable("jobs");
                });

            modelBuilder.Entity("ElProApp.Data.Models.JobDone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the job done record");

                    b.Property<int>("DaysForJob")
                        .HasColumnType("int")
                        .HasComment("Number of days spent completing the job");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key for the job being done");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(6, 2)")
                        .HasComment("Quantity of work completed");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("jobsDone");
                });

            modelBuilder.Entity("ElProApp.Data.Models.Mappings.BuildingTeamMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("TeamId");

                    b.ToTable("buildingTeamMappings");
                });

            modelBuilder.Entity("ElProApp.Data.Models.Mappings.EmployeeTeamMapping", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key for the employee.");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key for the team.");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the mapping between Employee and Team.");

                    b.HasKey("EmployeeId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("employeeTeamMappings");
                });

            modelBuilder.Entity("ElProApp.Data.Models.Mappings.JobDoneTeamMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobDoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobDoneId");

                    b.HasIndex("TeamId");

                    b.ToTable("jobDoneTeamMappings");
                });

            modelBuilder.Entity("ElProApp.Data.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key and unique identifier for the team");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the team with a maximum length");

                    b.HasKey("Id");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("ElProApp.Data.Models.JobDone", b =>
                {
                    b.HasOne("ElProApp.Data.Models.Job", "Job")
                        .WithMany("JobsDone")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ElProApp.Data.Models.Mappings.BuildingTeamMapping", b =>
                {
                    b.HasOne("ElProApp.Data.Models.Building", "Building")
                        .WithMany("TeamsOnBuilding")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ElProApp.Data.Models.Team", "Team")
                        .WithMany("BuildingWhitTeam")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ElProApp.Data.Models.Mappings.EmployeeTeamMapping", b =>
                {
                    b.HasOne("ElProApp.Data.Models.Employee", "Employee")
                        .WithMany("TeamsEmployeeBelongsTo")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ElProApp.Data.Models.Team", "Team")
                        .WithMany("EmployeesInTeam")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ElProApp.Data.Models.Mappings.JobDoneTeamMapping", b =>
                {
                    b.HasOne("ElProApp.Data.Models.JobDone", "JobDone")
                        .WithMany("TeamsDoTheJob")
                        .HasForeignKey("JobDoneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ElProApp.Data.Models.Team", "Team")
                        .WithMany("JobsDoneByTeam")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("JobDone");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ElProApp.Data.Models.Building", b =>
                {
                    b.Navigation("TeamsOnBuilding");
                });

            modelBuilder.Entity("ElProApp.Data.Models.Employee", b =>
                {
                    b.Navigation("TeamsEmployeeBelongsTo");
                });

            modelBuilder.Entity("ElProApp.Data.Models.Job", b =>
                {
                    b.Navigation("JobsDone");
                });

            modelBuilder.Entity("ElProApp.Data.Models.JobDone", b =>
                {
                    b.Navigation("TeamsDoTheJob");
                });

            modelBuilder.Entity("ElProApp.Data.Models.Team", b =>
                {
                    b.Navigation("BuildingWhitTeam");

                    b.Navigation("EmployeesInTeam");

                    b.Navigation("JobsDoneByTeam");
                });
#pragma warning restore 612, 618
        }
    }
}
